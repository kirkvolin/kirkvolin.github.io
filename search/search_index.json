{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<p>Click Here to Return to Team Website</p>","tags":["tag1","tag2"]},{"location":"#hello-my-name-is-kirk-volin","title":"Hello! My name is Kirk Volin","text":"<p>I am a student as ASU Polytechnic pursuing a Bachelor's in Robotics Engineering</p> <p>My subsystem for this project is the ESP32 with bidirectional internet communication over MQTT protocol.</p> <p>This site is intended as a repository for my work in the EGR 314 project class taught be Professor Nichols in Spring 2025.</p> <p>This is a work in progress and will be continually updated as we work on the project. </p>","tags":["tag1","tag2"]},{"location":"Block_Diagram/","title":"Block Diagram","text":""},{"location":"Block_Diagram/#block-diagram-bidirectional-internet-communication","title":"Block Diagram: Bidirectional Internet Communication","text":"<p>This chart shows the general layout and functionality that is required to operate the internet communication subsystem. It includes components for debugging as well as pin call outs for each connection. </p> <p></p>"},{"location":"Component_Selection/","title":"Component Selection","text":""},{"location":"Component_Selection/#team-role","title":"Team Role","text":"<p>My role in the team is the bidirection internet communication subsystem using MQTT protocol. For this subsystem, I will be using an ESP32-S3-WROOM-1-N4 surface mounted on a custom PCB. This subsystem will include UART to communicate with the sensor, actuator and human interface subsystems. The UART connection for human interface will be included for debugging and redundancy, as we are planning implementation of a wireless interface device which would communicate over the MQTT protocol. With this implementation, my device would be responsible for receiving and sending data over MQTT with the human interface device, and sending and receiving data from the senor and actuator subsystems. The communications will be used to control the speed and direction of a metal marble on a track through the use of copper coils to demonstrate magnetism, and sensor data received will provide position and velocity information to the interface device.</p>"},{"location":"Component_Selection/#component-selection-bidirectional-internet-communication","title":"Component Selection - Bidirectional Internet Communication","text":""},{"location":"Component_Selection/#power-regulator","title":"Power Regulator","text":"Solution 1 Pros Cons LM2576HVS-3.3 3.3V Fixed Output Most Expensive Large footprint makes hand soldering easier Unfamiliar Manufacturer Digikey Requires minimal external components Somewhat confusing component datasheet High current output allows more components to operate from this regulator if needed. Solution 2 Pros Cons LM2574M-3.3 3.3V Fixed Output Not a lot of extra current available for expanding the system Pins have good spacing for hand soldering Smallest component that could likely be hand soldered Digikey Small footprint can be good for board design Cheapest option Easy to follow datasheet Solution 3 Pros Cons LM2676S-3.3 Clear datasheet Single sided pins are close together, making hand soldering more difficult Large footprint make it easy to handle More expensive than another option Digikey Plenty of excess amperage available if needed Larger footprint takes up more space on PCB Solution 4 Pros Cons LM2595S-3.3 Clear datasheet Single sided pins are close together, potentially making hand soldering more difficult Large footprint make it easy to handle More expensive than another option Digikey Exceeds amperage requirement peak of 500mA for ESP32, but not as excessively as other options available Larger footprint takes up more space on PCB"},{"location":"Component_Selection/#selection","title":"Selection","text":"<p>For a power regulator, the LM2595S seems to be the optimal solution. It offers a good combination of price, usability, and versatility. Because of it's lower minimum input voltage of 4.5V, it enables the use of USB as a source of power compared to the LM2675M and LM2676S which wouldn't be able to accomplish this due to their minimum requirements of 6.5V and 8V respectively. The regulator's size of the TO263CA standard will also be much easier to manipulate and place for surface mount hand soldering.</p>"},{"location":"Component_Selection/#application","title":"Application","text":""},{"location":"Component_Selection/#footprint","title":"Footprint","text":""},{"location":"Component_Selection/#power-input","title":"Power Input","text":"Solution 1 Pros Cons Barrel jack Consistent power Need access to power outlets Easy to implement Separate cable required Digikey Solution 2 Pros Cons USB Consistent power Need access to power outlet or PC Relatively easy to implement Separate cable required Digikey USB B/C are extremely common Soldering can be tricky, esp. USB C Can provide both power and data Solution 2 Pros Cons Onboard Battery Portability Need backup batteries/charger Relatively easy to implement Would increase board size significantly or require separate board for power Digikey Much more expensive to implement"},{"location":"Component_Selection/#selection_1","title":"Selection","text":"<p>For powering this subsystem, I feel that versatility is important. Because USB is already required to program the ESP32 chip, I will design the circuit board so that it can be powered from either the USB connector or a separate 5.5x2.5mm barrel jack which is a common standard that my teammates and I already have cables for through the Robotics 1 and 2 courses through the Robotics 1 and 2 courses.</p>"},{"location":"Component_Selection/#esp-32","title":"ESP 32","text":"ESP Info Answer Model ESP32-S3-WROOM-1-N4 Product Page URL Product Page ESP32-S3-WROOM-1-N4 Datasheet URL Datasheet Reference Manual Reference Manual Vendor link Digikey Code Examples Code Examples External Resources URL(s) External Resources Unit cost $2.95 Absolute Maximum Current for entire IC 500mA Supply Voltage Range 3.0-3.6V Maximum GPIO current (per pin) 40mA Supports External Interrupts? Yes Required Programming Hardware, Cost, URL None needed, ESP32-S3 is programmable through USB OTG"},{"location":"Component_Selection/#pin-requirements","title":"Pin Requirements","text":"Module # Available Needed Associated Pins (or * for any) Power 2 2 3V3, EN Ground 2 2 GND, GND UART 3 2 GPIO43 ~ GPIO44, GPIO17 ~ GPIO18 External SPI 4 0 N/A I2C 2 0 N/A GPIO 45 3 * ADC 2 0 N/A LED PWM 5 5 * Motor PWM 0 0 N/A USB Programmer 1 1 GPIO19 ~ GPIO20"},{"location":"Component_Selection/#pinout","title":"Pinout","text":""},{"location":"Component_Selection/#footprint_1","title":"Footprint","text":""},{"location":"Component_Selection/#usb-otg","title":"USB OTG","text":""},{"location":"Component_Selection/#uart","title":"UART","text":""},{"location":"Component_Selection/#led-pwm","title":"LED PWM","text":""},{"location":"Component_Selection/#general-components","title":"General Components","text":"<p>All surface mount components such as resistors, capacitors, etc. are planned to use 0805 standard for ease of handling and soldering.</p>"},{"location":"Component_Selection/#power-budget","title":"Power Budget","text":""},{"location":"Schematic_Design/","title":"Schematic Design","text":""},{"location":"Schematic_Design/#schematic","title":"Schematic","text":""},{"location":"Schematic_Design/#zip-file","title":"ZIP File","text":"<p>Click here for PDF and ZIP files</p> <p>This schematic was created using Altium Designer. </p>"},{"location":"static/node_modules/mathjax/","title":"MathJax","text":""},{"location":"static/node_modules/mathjax/#beautiful-math-in-all-browsers","title":"Beautiful math in all browsers","text":"<p>MathJax is an open-source JavaScript display engine for LaTeX, MathML, and AsciiMath notation that works in all modern browsers.  It was designed with the goal of consolidating the recent advances in web technologies into a single, definitive, math-on-the-web platform supporting the major browsers and operating systems.  It requires no setup on the part of the user (no plugins to download or software to install), so the page author can write web documents that include mathematics and be confident that users will be able to view it naturally and easily.  Simply include MathJax and some mathematics in a web page, and MathJax does the rest.</p> <p>Some of the main features of MathJax include:</p> <ul> <li> <p>High-quality display of LaTeX, MathML, and AsciiMath notation in HTML pages</p> </li> <li> <p>Supported in most browsers with no plug-ins, extra fonts, or special   setup for the reader</p> </li> <li> <p>Easy for authors, flexible for publishers, extensible for developers</p> </li> <li> <p>Supports math accessibility, cut-and-paste interoperability, and other   advanced functionality</p> </li> <li> <p>Powerful API for integration with other web applications</p> </li> </ul> <p>See http://www.mathjax.org/ for additional details about MathJax, and https://docs.mathjax.org for the MathJax documentation.</p>"},{"location":"static/node_modules/mathjax/#mathjax-components","title":"MathJax Components","text":"<p>MathJax version 3 uses files called components that contain the various MathJax modules that you can include in your web pages or access on a server through NodeJS.  Some components combine all the pieces you need to run MathJax with one or more input formats and a particular output format, while other components are pieces that can be loaded on demand when needed, or by a configuration that specifies the pieces you want to combine in a custom way.  For usage instructions, see the MathJax documentation.</p> <p>Components provide a convenient packaging of MathJax's modules, but it is possible for you to form your own custom components, or to use MathJax's modules directly in a node application on a server.  There are web examples showing how to use MathJax in web pages and how to build your own components, and node examples illustrating how to use components in node applications or call MathJax modules directly.</p>"},{"location":"static/node_modules/mathjax/#whats-in-this-repository","title":"What's in this Repository","text":"<p>This repository contains only the component files for MathJax, not the source code for MathJax (which are available in a separate MathJax source repository).  These component files are the ones served by the CDNs that offer MathJax to the web.  In version 2, the files used on the web were also the source files for MathJax, but in version 3, the source files are no longer on the CDN, as they are not what are run in the browser.</p> <p>The components are stored in the <code>es5</code> directory, and are in ES5 format for the widest possible compatibility.  In the future, we may make an <code>es6</code> directory containing ES6 versions of the components.</p>"},{"location":"static/node_modules/mathjax/#installation-and-use","title":"Installation and Use","text":""},{"location":"static/node_modules/mathjax/#using-mathjax-components-from-a-cdn-on-the-web","title":"Using MathJax components from a CDN on the web","text":"<p>If you are loading MathJax from a CDN into a web page, there is no need to install anything.  Simply use a <code>script</code> tag that loads MathJax from the CDN.  E.g.,</p> <pre><code>&lt;script id=\"MathJax-script\" async src=\"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"&gt;&lt;/script&gt;\n</code></pre> <p>See the MathJax documentation, the MathJax Web Demos, and the MathJax Component Repository for more information.</p>"},{"location":"static/node_modules/mathjax/#hosting-your-own-copy-of-the-mathjax-components","title":"Hosting your own copy of the MathJax Components","text":"<p>If you want to host MathJax from your own server, you can do so by installing the <code>mathjax</code> package using <code>npm</code> and moving the <code>es5</code> directory to an appropriate location on your server:</p> <pre><code>npm install mathjax@3\nmv node_modules/mathjax/es5 &lt;path-to-server-location&gt;/mathjax\n</code></pre> <p>Note that we are still making updates to version 2, so include <code>@3</code> when you install, since the latest chronological version may not be version 3.</p> <p>Alternatively, you can get the files via GitHub:</p> <pre><code>git clone https://github.com/mathjax/MathJax.git mj-tmp\nmv mj-tmp/es5 &lt;path-to-server-location&gt;/mathjax\nrm -rf mj-tmp\n</code></pre> <p>Then (in either case) you can use a script tag like the following:</p> <pre><code>&lt;script id=\"MathJax-script\" async src=\"&lt;url-to-your-site&gt;/mathjax/tex-chtml.js\"&gt;&lt;/script&gt;\n</code></pre> <p>where <code>&lt;url-to-your-site&gt;</code> is replaced by the URL to the location where you moved the MathJax files above.</p> <p>See the documentation for details.</p>"},{"location":"static/node_modules/mathjax/#using-mathjax-components-in-a-node-application","title":"Using MathJax components in a node application","text":"<p>To use MathJax components in a node application, install the <code>mathjax</code> package:</p> <pre><code>npm install mathjax@3\n</code></pre> <p>(we are still making updates to version 2, so you should include <code>@3</code> since the latest chronological version may not be version 3).</p> <p>Then require <code>mathjax</code> within your application:</p> <pre><code>require('mathjax').init({ ... }).then((MathJax) =&gt; { ... });\n</code></pre> <p>where the first <code>{ ... }</code> is a MathJax configuration, and the second <code>{ ... }</code> is the code to run after MathJax has been loaded.  E.g.</p> <pre><code>require('mathjax').init({\nloader: {load: ['input/tex', 'output/svg']}\n}).then((MathJax) =&gt; {\nconst svg = MathJax.tex2svg('\\\\frac{1}{x^2-1}', {display: true});\nconsole.log(MathJax.startup.adaptor.outerHTML(svg));\n}).catch((err) =&gt; console.log(err.message));\n</code></pre> <p>Note: this technique is for node-based application only, not for browser applications.  This method sets up an alternative DOM implementation, which you don't need in the browser, and tells MathJax to use node's <code>require()</code> command to load external modules.  This setup will not work properly in the browser, even if you webpack it or bundle it in other ways.</p> <p>See the documentation and the MathJax Node Repository for more details.</p>"},{"location":"static/node_modules/mathjax/#reducing-the-size-of-the-components-directory","title":"Reducing the Size of the Components Directory","text":"<p>Since the <code>es5</code> directory contains all the component files, so if you are only planning one use one configuration, you can reduce the size of the MathJax directory by removing unused components. For example, if you are using the <code>tex-chtml.js</code> component, then you can remove the <code>tex-mml-chtml.js</code>, <code>tex-svg.js</code>, <code>tex-mml-svg.js</code>, <code>tex-chtml-full.js</code>, and <code>tex-svg-full.js</code> configurations, which will save considerable space.  Indeed, you should be able to remove everything other than <code>tex-chtml.js</code>, and the <code>input/tex/extensions</code>, <code>output/chtml/fonts/woff-v2</code>, <code>adaptors</code>, <code>a11y</code>, and <code>sre</code> directories.  If you are using the results only on the web, you can remove <code>adaptors</code> as well.</p> <p>If you are not using A11Y support (e.g., speech generation, or semantic enrichment), then you can remove <code>a11y</code> and <code>sre</code> as well (though in this case you may need to disable the assistive tools in the MathJax contextual menu in order to avoid MathJax trying to load them when they aren't there).</p> <p>If you are using SVG rather than CommonHTML output (e.g., <code>tex-svg.js</code> rather than <code>tex-chtml.js</code>), you can remove the <code>output/chtml/fonts/woff-v2</code> directory.  If you are using MathML input rather than TeX (e.g., <code>mml-chtml.js</code> rather than <code>tex-chtml.js</code>), then you can remove <code>input/tex/extensions</code> as well.</p>"},{"location":"static/node_modules/mathjax/#the-component-files-and-pull-requests","title":"The Component Files and Pull Requests","text":"<p>The <code>es5</code> directory is generated automatically from the contents of the MathJax source repository.  You can rebuild the components using the command</p> <pre><code>npm run make-es5 --silent\n</code></pre> <p>Note that since the contents of this repository are generated automatically, you should not submit pull requests that modify the contents of the <code>es5</code> directory.  If you wish to submit a modification to MathJax, you should make a pull request in the MathJax source repository.</p>"},{"location":"static/node_modules/mathjax/#mathjax-community","title":"MathJax Community","text":"<p>The main MathJax website is http://www.mathjax.org, and it includes announcements and other important information.  A MathJax user forum for asking questions and getting assistance is hosted at Google, and the MathJax bug tracker is hosted at GitHub.</p> <p>Before reporting a bug, please check that it has not already been reported.  Also, please use the bug tracker (rather than the help forum) for reporting bugs, and use the user's forum (rather than the bug tracker) for questions about how to use MathJax.</p>"},{"location":"static/node_modules/mathjax/#mathjax-resources","title":"MathJax Resources","text":"<ul> <li>MathJax Documentation</li> <li>MathJax Components</li> <li>MathJax Source Code</li> <li>MathJax Web Examples</li> <li>MathJax Node Examples</li> <li>MathJax Bug Tracker</li> <li>MathJax Users' Group</li> </ul>"}]}